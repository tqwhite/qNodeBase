'use strict';

//START OF moduleFunction() ============================================================

var moduleFunction = function(qtools) {
	const arrayItemsName = 'arrayItems';
	
	const upgradeConfigItems = config => {
		const outObj = qtools.clone(config);

		for (var i in config[arrayItemsName]) {
			var element = config[arrayItemsName][i];
			qtools.putSurePath(outObj, element, 'placeholder');

			const inObj = qtools.getSurePath(config, element, []);

			const outArray = [];
			for (i in inObj) {
				outArray[i] = inObj[i];
			}
			qtools.putSurePath(outObj, element, outArray);
		}

		return outObj;
	};

	
	let multiIni = require('multi-ini');
	multiIni = new multiIni.Class({
		filters: [
			value => {
				
				if (value==/^''$/) {
					return value;
				}
				
				if (value.match(/^''/)) {
					return value.replace(/^''/, '');
				}
			
				switch (value) {
					case 'true':
						return true;
					case 'false':
						return false;
					case 'null':
						return null;
				}

				if (!isNaN(+value)) {
					return +value;
				}

				return value;
			}
		]
	});
	
	qtools.configFileProcessor = multiIni;
	qtools.configFileProcessor.upgradeConfigItems = upgradeConfigItems;
	
	qtools.configFileProcessor.getConfig = configPath => {
		const config = qtools.configFileProcessor.read(configPath); //this is multi-ini with post-processing
		return qtools.configFileProcessor.upgradeConfigItems(config);
	};
	qtools.configFileProcessor.setArrayItemsName = newArrayItemsName => {
		arrayItemsName = newArrayItemsName;
	};
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction;
//module.exports = new moduleFunction();


/*
	Array Remove - By John Resig (MIT Licensed)
	http://ejohn.org/blog/javascript-array-remove/
	Remove the second item from the array
		array.remove(1);
	Remove the second-to-last item from the array
		array.remove(-2);
	Remove the second and third items from the array
		array.remove(1,2);
	Remove the last and second-to-last items from the array
		array.remove(-2,-1);
*/

const docList = [
	'Array.prototype.remove = function(from, to)',
	'String.prototype.toCamelCase = function(delimiter, pascalCase)'
];

Array.prototype.remove = function(from, to) {
	var rest = this.slice((to || from) + 1 || this.length);
	this.length = from < 0 ? this.length + from : from;
	return this.push.apply(this, rest);
};

//This works. I can't figure out how to make it transparent to for-in loops. Could break things. tqii 090719
// Object.prototype.numericToArray = function(args={}) {
// 	const {collapseHoles=true}=args;
// 	if (typeof this.length != 'undefined') {
// 		return this;
// 	}
// 
// 	var outArray = [];
// 	var workingArray = [];
// 	const extraElements = [];
// 	let maxIndex = 0;
// 	
// 	let naturalIndex=0;
// 	
// 	for (var i in this) {
// 		if (!this.hasOwnProperty(i)) {
// 			continue;
// 		}
// 
// 		var element = this[i];
// 
// 		if (isNaN(+i)) {
// 			extraElements.push({
// 				key: i,
// 				value: element
// 			});
// 			continue;
// 		}
// 		
// 	if (collapseHoles){
// 		workingArray[naturalIndex] = element;
// 		naturalIndex++;
// 	}
// 	else{
// 		workingArray[i] = element;
// 		maxIndex = Math.max(maxIndex, i);
// 	}
// 	
// 	}
// 	
// 	if (!collapseHoles){
// 	
// 		for (var i = 0; i < maxIndex + 1; i++) {
// 			outArray.push(
// 				typeof workingArray[i] != 'undefined' ? workingArray[i] : void ''
// 			);
// 		}
// 	
// 	}
// 	else{
// 		outArray=workingArray;
// 	}
// 
// 	for (var i = 0, len = extraElements.length; i < len; i++) {
// 		outArray.push(extraElements[i]);
// 	}
// 
// 	return outArray;
// };

String.prototype.toCamelCase = function(delimiter, pascalCase) {
	var firstCharFunction = pascalCase
		? function(v) {
				return v.toUpperCase();
			}
		: function(v) {
				return v.toLowerCase();
			};
	delimiter = delimiter ? delimiter : ' ';
	return this.split(delimiter)
		.map(function(word) {
			var first = word.substring(0, 1);
			word = word.replace(new RegExp(first), first.toUpperCase());
			return word;
		})
		.join('')
		.replace(/^(.)/, firstCharFunction);
};

const addMorePrototypes = (qtools, updatePrototypes) => {
	if (updatePrototypes) {
		String.prototype.qtReplace = function(parmSet) {
			parmSet.template = this;
			if (parmSet.replaceArray) {
				return qtools.templateReplaceArray(parmSet);
			} else {
				return qtools.templateReplace(parmSet);
			}
		};
		docList.push('String.prototype.qtReplace(templateReplaceArgs)');

		const qtoolsNumberIterator = require('qtools-number-iterator').addToPrototype();
	}
};

module.exports = {
	docList,
	addMorePrototypes
};

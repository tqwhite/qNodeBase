'use strict';
var util = require('util');

//START OF moduleFunction() ============================================================
var moduleFunction = function(self) {
	const qtools = self;
	const moduleName = qtools.ping().employer;

	qtools.ERROR = 'ERROR';
	qtools.WARN = 'WARN';
	qtools.MILESTONE = 'MILESTONE';
	qtools.INFO = 'INFO';
	qtools.NOTE = 'NOTE';
	qtools.DETAIL = 'DETAIL';
	qtools.DEBUG = 'DEBUG';
	qtools.ALL = 'ALL';

	const priority = [
		qtools.MILESTONE,
		qtools.ERROR,
		qtools.WARN,
		qtools.INFO,
		qtools.NOTE,
		qtools.DEBUG,
		qtools.DETAIL,
		qtools.ALL
	];

	let currentMessageLevel = process.env.qtoolsLogLevel || qtools.ALL;

	const importantEnough = severity => {
		return priority.indexOf(currentMessageLevel) < priority.indexOf(severity);
	};

	qtools.setMessageLevel = level => {
		if (priority.indexOf(level) == -1) {
			console.log(`Invalid message level ${level} in qtools.log.js`);
			console.dir({ ['use qtools.']: priority });
		}

		currentMessageLevel = level;
	};

	qtools.log = function(message, level, args) {
		if (!args || args.addModule !== false) {
			message = message.replace(/(\n*)$/, ` [${moduleName}]$1`);
		}

		switch (level) {
			case qtools.MILESTONE:
				importantEnough(level) || console.log(message);
				break;

			case qtools.ERROR:
				importantEnough(level) || console.log(message);
				break;

			case qtools.WARN:
				importantEnough(level) || console.log(message);
				break;

			case qtools.INFO:
				importantEnough(level) || console.log(message);
				break;

			case qtools.DETAIL:
				importantEnough(level) || console.log(message);
				break;

			case qtools.NOTE:
				importantEnough(level) || console.log(message);
				break;

			case qtools.DEBUG:
				importantEnough(level) || console.log(message);
				break;

			default:
				console.log(message);
				break;
		}
	};

	qtools.logError = function(message, controls) {
		self.log(message, qtools.ERROR, controls);
	};
	qtools.logWarn = function(message, controls) {
		self.log(message, qtools.WARN, controls);
	};
	qtools.logMilestone = function(message, controls) {
		self.log(message, qtools.MILESTONE, controls);
	};
	qtools.logDetail = function(message, controls) {
		self.log(message, qtools.DETAIL, controls);
	};
	qtools.logInfo = function(message, controls) {
		self.log(message, qtools.INFO, controls);
	};
	qtools.logNote = function(message, controls) {
		self.log(message, qtools.NOTE, controls);
	};
	qtools.logDebug = function(message, controls) {
		self.log(message, qtools.DEBUG, controls);
	};

	qtools.setLogMilestone = () => {
		qtools.setMessageLevel(qtools.MILESTONE);
	};

	qtools.setLogError = () => {
		qtools.setMessageLevel(qtools.ERROR);
	};

	qtools.setLogWarn = () => {
		qtools.setMessageLevel(qtools.WARN);
	};

	qtools.setLogInfo = () => {
		qtools.setMessageLevel(qtools.INFO);
	};

	qtools.setLogNote = () => {
		qtools.setMessageLevel(qtools.NOTE);
	};

	qtools.setLogDebug = () => {
		qtools.setMessageLevel(qtools.DEBUG);
	};

	qtools.setLogDetail = () => {
		qtools.setMessageLevel(qtools.DETAIL);
	};

	qtools.setLogAll = () => {
		qtools.setMessageLevel(qtools.ALL);
	};
};

//END OF moduleFunction() ============================================================
module.exports = moduleFunction;

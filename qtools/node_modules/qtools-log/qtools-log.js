"use strict";
var util = require("util");

//START OF moduleFunction() ============================================================
var moduleFunction = function(self) {
	const qtools = self;

	qtools.ERROR = "ERROR";
	qtools.WARN = "WARN";
	qtools.MILESTONE = "MILESTONE";
	qtools.INFO = "INFO";
	qtools.NOTE = "NOTE";
	qtools.DETAIL = "DETAIL";
	qtools.DEBUG = "DEBUG";
	qtools.ALL = "ALL";

	const priority = [
		qtools.ERROR,
		qtools.WARN,
		qtools.MILESTONE,
		qtools.INFO,
		qtools.NOTE,
		qtools.DEBUG,
		qtools.DETAIL,
		qtools.ALL
	];


	let currentMessageLevel =  qtools.MILESTONE;

	const importantEnough = severity => {
		return (priority.indexOf(currentMessageLevel) < priority.indexOf(severity));
	};
	
	qtools.setMessageLevel=(level)=>{
		if (priority.indexOf(level)==-1){
			console.log(`Invalid message level ${level} in qtools.log.js`);
			console.dir({['use qtools.']:priority});
		}
	
		currentMessageLevel=level;
	}

	qtools.log = function(message, level) {

		switch (level) {
			case qtools.ERROR:
				importantEnough(level) || console.log(message);
				break;

			case qtools.WARN:
				importantEnough(level) || console.log(message);
				break;

			case qtools.MILESTONE:
				importantEnough(level) || console.log(message);
				break;

			case qtools.DETAIL:
				importantEnough(level) || console.log(message);
				break;

			case qtools.INFO:
				importantEnough(level) || console.log(message);
				break;

			case qtools.NOTE:
				importantEnough(level) || console.log(message);
				break;

			case qtools.DEBUG:
				importantEnough(level) || console.log(message);
				break;

			default:
				console.log(message);
				break;
			
		}
	};

	qtools.logError = function(message) {
		self.log(message, qtools.ERROR);
	};
	qtools.logWarn = function(message) {
		self.log(message, qtools.WARN);
	};
	qtools.logMilestone = function(message) {
		self.log(message, qtools.MILESTONE);
	};
	qtools.logDetail = function(message) {
		self.log(message, qtools.DETAIL);
	};
	qtools.logInfo = function(message) {
		self.log(message, qtools.INFO);
	};
	qtools.logNote = function(message) {
		self.log(message, qtools.NOTE);
	};
	qtools.logDebug = function(message) {
		self.log(message, qtools.DEBUG);
	};
};

//END OF moduleFunction() ============================================================
module.exports = moduleFunction;
